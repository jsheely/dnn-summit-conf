var _ = require('lodash');
var browserify = require('browserify');
var bundleLogger = require('./bundle_logger');
var gulp = require('gulp');
var handleErrors = require('./handle_errors');
var source = require('vinyl-source-stream');
var watchify = require('watchify');
var tsify = require('tsify');
var uglify = require('gulp-uglify');
var sourcemaps = require('gulp-sourcemaps');
var buffer = require('vinyl-buffer');
var gulpif = require('gulp-if');
var notify = require("gulp-notify");
var format = require('./format');
var typescript = require('typescript');


var createBundle = function(bundleConfig, taskConfig) {

    var devMode = taskConfig.devMode;

    bundleConfig = _.extend({
        extension: ['.js', '.ts', '.tsx'],
        outputName: 'bundle.js',
        jsx: 'react'
    }, bundleConfig);

    if (devMode) {
        bundleConfig = _.extend(bundleConfig, watchify.args, {
            debug: true
        });
        bundleConfig = _.omit(bundleConfig, ['external', 'require']);
    }

    var b = browserify(bundleConfig)
    .plugin(tsify, {
        noImplicitAny: true,
        jsx: bundleConfig.jsx,
        typescript: typescript
    });

    var bundle = function() {
        bundleLogger.start(bundleConfig.outputName);

        return b
        .bundle()
        .on('error', handleErrors)
        .pipe(source(bundleConfig.outputName))
        .pipe(buffer())
        .pipe(sourcemaps.init({
            loadMaps: true
        }))
        .pipe(gulpif(!devMode, uglify()))
        .pipe(gulpif(devMode, sourcemaps.write('./')))
        .pipe(gulp.dest(bundleConfig.dest))
        .on('end', reportFinished)
        .pipe(notify("Browserify OK " + format.simplyNow()));
    };

    if (devMode) {
        b = watchify(b);
        b.on('update', bundle);
        bundleLogger.watch(bundleConfig.outputName);
    } else {
        if (bundleConfig.require) b.require(bundleConfig.require);
        if (bundleConfig.external) b.external(bundleConfig.external);
    }

    var reportFinished = function() {
        bundleLogger.end(bundleConfig.outputName);

        if (taskConfig.bundleQueue) {
            taskConfig.bundleQueue--;
            if (taskConfig.bundleQueue === 0) {
                taskConfig.callback();
            }
        }
    };

    return bundle();
};

var browserifyTask = function(bundleConfigs, devMode) {
    return function(callback) {

        var config = {
            devMode: devMode,
            bundleQueue: bundleConfigs.length,
            callback: callback
        };

        bundleConfigs.forEach(function (item) {
            createBundle(item, config)
        });
    };
};


module.exports = browserifyTask;
